#!/usr/bin/env python3
"""
üö® TEST EMERGENCY TCN INTEGRATION
Verificar que el sistema use los modelos de emergencia con 66 features
"""

import asyncio
from simple_professional_manager import SimpleProfessionalTradingManager

async def test_emergency_tcn_integration():
    """Test de integraci√≥n de modelos TCN de emergencia"""
    print("üö® TESTING EMERGENCY TCN INTEGRATION")
    print("="*50)

    # Inicializar manager
    manager = SimpleProfessionalTradingManager()
    await manager.initialize()

    print(f"üí∞ Balance: ${manager.current_balance:.2f}")

    # Obtener precios actuales
    print("\nüìä Obteniendo precios actuales...")
    prices = await manager._get_current_prices()
    print(f"   Precios obtenidos: {len(prices)} s√≠mbolos")

    for symbol, price in prices.items():
        print(f"   {symbol}: ${price:,.2f}")

    # Generar se√±ales TCN con modelos de emergencia
    print("\nüß† Generando se√±ales TCN de emergencia...")
    signals = await manager._generate_tcn_signals(prices)

    print(f"\nüéØ RESULTADOS:")
    print(f"   Se√±ales generadas: {len(signals)}")

    if signals:
        for symbol, signal_data in signals.items():
            print(f"\n   üìà {symbol}:")
            print(f"      Se√±al: {signal_data['signal']}")
            print(f"      Confianza: {signal_data['confidence']:.1%}")
            print(f"      Features usados: {signal_data['features_used']}")
            print(f"      Precio actual: ${signal_data['current_price']:,.2f}")

            # Mostrar probabilidades
            probs = signal_data['probabilities']
            print(f"      Probabilidades:")
            print(f"        SELL: {probs['SELL']:.3f}")
            print(f"        HOLD: {probs['HOLD']:.3f}")
            print(f"        BUY:  {probs['BUY']:.3f}")
    else:
        print("   ‚ö†Ô∏è No se generaron se√±ales (correcto en mercado bajista)")

    print("\n‚úÖ Test completado")

if __name__ == "__main__":
    asyncio.run(test_emergency_tcn_integration())
