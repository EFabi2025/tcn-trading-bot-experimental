"""
üéØ PORTFOLIO DIVERSIFICATION MANAGER
=====================================
Gestiona la diversificaci√≥n del portafolio sin liquidar posiciones existentes.
Implementa optimizaci√≥n gradual y respeta las posiciones actuales.
"""

import asyncio
import numpy as np
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
import aiohttp
from config.trading_config import TradingConfig

@dataclass
class PortfolioPosition:
    """üìä Representaci√≥n de una posici√≥n en el portafolio"""
    symbol: str
    quantity: float
    entry_price: float
    current_price: float
    value_usd: float
    percentage: float
    category: str
    age_minutes: int
    pnl_percent: float

@dataclass
class DiversificationAnalysis:
    """üìà An√°lisis de diversificaci√≥n del portafolio"""
    total_value: float
    symbol_concentrations: Dict[str, float]
    category_concentrations: Dict[str, float]
    over_concentrated_symbols: List[str]
    over_concentrated_categories: List[str]
    diversification_score: float  # 0-100
    recommendations: List[str]

class PortfolioDiversificationManager:
    """üéØ Gestor de Diversificaci√≥n de Portafolio"""

    def __init__(self):
        # Acceder directamente a la configuraci√≥n de diversificaci√≥n
        self.diversification_config = TradingConfig.PORTFOLIO_DIVERSIFICATION
        self.last_analysis = None
        self.correlation_cache = {}
        self.last_correlation_update = None

    async def analyze_portfolio_diversification(self, positions: List[PortfolioPosition]) -> DiversificationAnalysis:
        """üìä Analizar diversificaci√≥n actual del portafolio"""

        if not positions:
            return DiversificationAnalysis(
                total_value=0.0,
                symbol_concentrations={},
                category_concentrations={},
                over_concentrated_symbols=[],
                over_concentrated_categories=[],
                diversification_score=0.0,
                recommendations=["No hay posiciones en el portafolio"]
            )

        total_value = sum(pos.value_usd for pos in positions)

        # Calcular concentraciones por s√≠mbolo
        symbol_concentrations = {}
        for pos in positions:
            if pos.symbol not in symbol_concentrations:
                symbol_concentrations[pos.symbol] = 0.0
            symbol_concentrations[pos.symbol] += (pos.value_usd / total_value) * 100

        # Calcular concentraciones por categor√≠a
        category_concentrations = {}
        for pos in positions:
            category = self.diversification_config['SYMBOL_CATEGORIES'].get(pos.symbol, 'UNKNOWN')
            if category not in category_concentrations:
                category_concentrations[category] = 0.0
            category_concentrations[category] += (pos.value_usd / total_value) * 100

        # Identificar sobre-concentraciones
        max_symbol_conc = self.diversification_config['MAX_SYMBOL_CONCENTRATION_PERCENT']
        max_category_conc = self.diversification_config['MAX_CATEGORY_CONCENTRATION_PERCENT']

        over_concentrated_symbols = [
            symbol for symbol, conc in symbol_concentrations.items()
            if conc > max_symbol_conc
        ]

        over_concentrated_categories = [
            category for category, conc in category_concentrations.items()
            if conc > max_category_conc
        ]

        # Calcular score de diversificaci√≥n
        diversification_score = self._calculate_diversification_score(
            symbol_concentrations, category_concentrations
        )

        # Generar recomendaciones
        recommendations = self._generate_diversification_recommendations(
            positions, symbol_concentrations, category_concentrations,
            over_concentrated_symbols, over_concentrated_categories
        )

        analysis = DiversificationAnalysis(
            total_value=total_value,
            symbol_concentrations=symbol_concentrations,
            category_concentrations=category_concentrations,
            over_concentrated_symbols=over_concentrated_symbols,
            over_concentrated_categories=over_concentrated_categories,
            diversification_score=diversification_score,
            recommendations=recommendations
        )

        self.last_analysis = analysis
        return analysis

    def _calculate_diversification_score(self, symbol_conc: Dict[str, float],
                                       category_conc: Dict[str, float]) -> float:
        """üìà Calcular score de diversificaci√≥n (0-100)"""

        # Penalizar concentraciones altas
        symbol_penalty = 0
        for conc in symbol_conc.values():
            if conc > 40:
                symbol_penalty += (conc - 40) * 2
            elif conc > 30:
                symbol_penalty += (conc - 30) * 1

        category_penalty = 0
        for conc in category_conc.values():
            if conc > 60:
                category_penalty += (conc - 60) * 1.5

        # Bonificar diversidad
        num_symbols = len(symbol_conc)
        num_categories = len(category_conc)

        diversity_bonus = min(num_symbols * 10, 30) + min(num_categories * 15, 30)

        # Score base
        base_score = 50
        final_score = base_score + diversity_bonus - symbol_penalty - category_penalty

        return max(0, min(100, final_score))

    def _generate_diversification_recommendations(self, positions: List[PortfolioPosition],
                                                symbol_conc: Dict[str, float],
                                                category_conc: Dict[str, float],
                                                over_symbols: List[str],
                                                over_categories: List[str]) -> List[str]:
        """üí° Generar recomendaciones de diversificaci√≥n"""

        recommendations = []

        # Alertas de sobre-concentraci√≥n
        for symbol in over_symbols:
            conc = symbol_conc[symbol]
            recommendations.append(
                f"‚ö†Ô∏è ALTA CONCENTRACI√ìN: {symbol} representa {conc:.1f}% del portafolio "
                f"(l√≠mite: {self.diversification_config['MAX_SYMBOL_CONCENTRATION_PERCENT']}%)"
            )

        for category in over_categories:
            conc = category_conc[category]
            recommendations.append(
                f"‚ö†Ô∏è CATEGOR√çA CONCENTRADA: {category} representa {conc:.1f}% "
                f"(l√≠mite: {self.diversification_config['MAX_CATEGORY_CONCENTRATION_PERCENT']}%)"
            )

        # Recomendaciones de diversificaci√≥n
        if len(symbol_conc) < self.diversification_config['MIN_SYMBOLS_IN_PORTFOLIO']:
            recommendations.append(
                f"üí° DIVERSIFICAR: Considerar agregar m√°s s√≠mbolos "
                f"(actual: {len(symbol_conc)}, m√≠nimo: {self.diversification_config['MIN_SYMBOLS_IN_PORTFOLIO']})"
            )

        # Contar posiciones por s√≠mbolo
        symbol_position_count = {}
        for pos in positions:
            symbol_position_count[pos.symbol] = symbol_position_count.get(pos.symbol, 0) + 1

        for symbol, count in symbol_position_count.items():
            if count > self.diversification_config['MAX_POSITIONS_PER_SYMBOL']:
                recommendations.append(
                    f"‚ö†Ô∏è M√öLTIPLES POSICIONES: {symbol} tiene {count} posiciones "
                    f"(l√≠mite: {self.diversification_config['MAX_POSITIONS_PER_SYMBOL']})"
                )

        if not recommendations:
            recommendations.append("‚úÖ Portafolio bien diversificado")

        return recommendations

    async def should_allow_new_position(self, symbol: str, position_size_usd: float,
                                      current_positions: List[PortfolioPosition]) -> Tuple[bool, str]:
        """üéØ Determinar si se debe permitir una nueva posici√≥n"""

        # Analizar portafolio actual
        analysis = await self.analyze_portfolio_diversification(current_positions)

        # Simular nueva posici√≥n
        total_value_after = analysis.total_value + position_size_usd

        # Calcular nueva concentraci√≥n del s√≠mbolo
        current_symbol_value = sum(pos.value_usd for pos in current_positions if pos.symbol == symbol)
        new_symbol_concentration = ((current_symbol_value + position_size_usd) / total_value_after) * 100

        # Verificar l√≠mite de concentraci√≥n por s√≠mbolo
        max_symbol_conc = self.diversification_config['MAX_SYMBOL_CONCENTRATION_PERCENT']
        if new_symbol_concentration > max_symbol_conc:
            return False, f"Nueva posici√≥n exceder√≠a l√≠mite de concentraci√≥n para {symbol}: {new_symbol_concentration:.1f}% > {max_symbol_conc}%"

        # Verificar l√≠mite de posiciones por s√≠mbolo
        current_positions_count = len([pos for pos in current_positions if pos.symbol == symbol])
        max_positions = self.diversification_config['MAX_POSITIONS_PER_SYMBOL']
        if current_positions_count >= max_positions:
            return False, f"L√≠mite de posiciones alcanzado para {symbol}: {current_positions_count}/{max_positions}"

        # Verificar concentraci√≥n por categor√≠a
        category = self.diversification_config['SYMBOL_CATEGORIES'].get(symbol, 'UNKNOWN')
        current_category_value = sum(
            pos.value_usd for pos in current_positions
            if self.diversification_config['SYMBOL_CATEGORIES'].get(pos.symbol, 'UNKNOWN') == category
        )
        new_category_concentration = ((current_category_value + position_size_usd) / total_value_after) * 100

        max_category_conc = self.diversification_config['MAX_CATEGORY_CONCENTRATION_PERCENT']
        if new_category_concentration > max_category_conc:
            return False, f"Nueva posici√≥n exceder√≠a l√≠mite de categor√≠a {category}: {new_category_concentration:.1f}% > {max_category_conc}%"

        return True, "Posici√≥n permitida por diversificaci√≥n"

    def calculate_diversification_adjusted_size(self, symbol: str, original_size_usd: float,
                                              current_positions: List[PortfolioPosition]) -> float:
        """üìè Ajustar tama√±o de posici√≥n considerando diversificaci√≥n"""

        if not current_positions:
            return original_size_usd

        total_value = sum(pos.value_usd for pos in current_positions)
        current_symbol_value = sum(pos.value_usd for pos in current_positions if pos.symbol == symbol)

        # Calcular tama√±o m√°ximo permitido
        max_symbol_conc = self.diversification_config['MAX_SYMBOL_CONCENTRATION_PERCENT']
        max_symbol_value = (total_value + original_size_usd) * (max_symbol_conc / 100)
        max_new_position = max_symbol_value - current_symbol_value

        # Aplicar factor de diversificaci√≥n
        diversification_factor = 1.0 - self.diversification_config['DIVERSIFICATION_PRIORITY']

        # Si hay sobre-concentraci√≥n, reducir tama√±o
        current_concentration = (current_symbol_value / total_value) * 100 if total_value > 0 else 0
        warning_threshold = self.diversification_config['CONCENTRATION_WARNING_THRESHOLD']

        if current_concentration > warning_threshold:
            # Reducir tama√±o gradualmente
            reduction_factor = max(0.3, 1.0 - ((current_concentration - warning_threshold) / 20))
            diversification_factor *= reduction_factor

        adjusted_size = min(original_size_usd * diversification_factor, max_new_position)

        return max(0, adjusted_size)

    def get_diversification_priority_symbols(self, available_symbols: List[str],
                                           current_positions: List[PortfolioPosition]) -> List[str]:
        """üéØ Obtener s√≠mbolos prioritarios para diversificaci√≥n"""

        if not current_positions:
            return available_symbols

        # Obtener s√≠mbolos y categor√≠as actuales
        current_symbols = set(pos.symbol for pos in current_positions)
        current_categories = set(
            self.diversification_config['SYMBOL_CATEGORIES'].get(pos.symbol, 'UNKNOWN')
            for pos in current_positions
        )

        # Priorizar s√≠mbolos de nuevas categor√≠as
        priority_symbols = []
        for symbol in available_symbols:
            category = self.diversification_config['SYMBOL_CATEGORIES'].get(symbol, 'UNKNOWN')

            # Alta prioridad: nueva categor√≠a
            if category not in current_categories:
                priority_symbols.insert(0, symbol)
            # Media prioridad: nuevo s√≠mbolo en categor√≠a existente
            elif symbol not in current_symbols:
                priority_symbols.append(symbol)

        # Agregar s√≠mbolos existentes al final
        for symbol in available_symbols:
            if symbol not in priority_symbols:
                priority_symbols.append(symbol)

        return priority_symbols

    async def generate_diversification_report(self, positions: List[PortfolioPosition]) -> str:
        """üìä Generar reporte de diversificaci√≥n"""

        analysis = await self.analyze_portfolio_diversification(positions)

        report = f"""
üéØ REPORTE DE DIVERSIFICACI√ìN DE PORTAFOLIO
==========================================
üí∞ Valor Total: ${analysis.total_value:.2f}
üìä Score de Diversificaci√≥n: {analysis.diversification_score:.1f}/100

üìà CONCENTRACI√ìN POR S√çMBOLO:
"""

        for symbol, conc in sorted(analysis.symbol_concentrations.items(), key=lambda x: x[1], reverse=True):
            status = "üî¥" if conc > self.diversification_config['MAX_SYMBOL_CONCENTRATION_PERCENT'] else \
                    "üü°" if conc > self.diversification_config['CONCENTRATION_WARNING_THRESHOLD'] else "üü¢"
            report += f"   {status} {symbol}: {conc:.1f}%\n"

        report += f"\nüè∑Ô∏è CONCENTRACI√ìN POR CATEGOR√çA:\n"
        for category, conc in sorted(analysis.category_concentrations.items(), key=lambda x: x[1], reverse=True):
            status = "üî¥" if conc > self.diversification_config['MAX_CATEGORY_CONCENTRATION_PERCENT'] else "üü¢"
            report += f"   {status} {category}: {conc:.1f}%\n"

        report += f"\nüí° RECOMENDACIONES:\n"
        for rec in analysis.recommendations:
            report += f"   {rec}\n"

        return report

    def is_diversification_enabled(self) -> bool:
        """‚úÖ Verificar si la diversificaci√≥n est√° habilitada"""
        return self.diversification_config.get('RESPECT_EXISTING_POSITIONS', True)
