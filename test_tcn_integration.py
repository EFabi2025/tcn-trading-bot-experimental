#!/usr/bin/env python3
"""
üß™ TEST DE INTEGRACI√ìN TCN
Verificar que el sistema usa el modelo TCN real en lugar de se√±ales aleatorias
"""

import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from simple_professional_manager import SimpleProfessionalTradingManager

async def test_tcn_integration():
    """üß™ Probar integraci√≥n del modelo TCN"""
    print("üß™ INICIANDO TEST DE INTEGRACI√ìN TCN")
    print("="*60)

    # Crear manager
    manager = SimpleProfessionalTradingManager()

    try:
        # Inicializar (sin conectar a Binance real)
        print("üîß Inicializando componentes...")

        # Inicializar risk manager para el test
        from advanced_risk_manager import AdvancedRiskManager

        # Crear configuraci√≥n mock para Binance
        class MockBinanceConfig:
            def __init__(self):
                self.api_key = os.getenv('BINANCE_API_KEY', 'mock_key')
                self.secret_key = os.getenv('BINANCE_SECRET_KEY', 'mock_secret')
                self.base_url = "https://testnet.binance.vision"

        mock_config = MockBinanceConfig()
        manager.risk_manager = AdvancedRiskManager(mock_config)

        # Simular balance para testing
        manager.current_balance = 100.0

        # Crear precios de prueba
        test_prices = {
            "BTCUSDT": 45000.0,
            "ETHUSDT": 3000.0,
            "BNBUSDT": 400.0
        }

        print(f"üí∞ Balance simulado: ${manager.current_balance:.2f}")
        print(f"üìä Precios de prueba: {test_prices}")
        print()

        # Probar generaci√≥n de se√±ales TCN
        print("üß† PROBANDO GENERACI√ìN DE SE√ëALES TCN...")
        print("-" * 40)

        signals = await manager._generate_tcn_signals(test_prices)

        print()
        print("üìä RESULTADOS DEL TEST:")
        print("-" * 40)

        if signals:
            print(f"‚úÖ Se generaron {len(signals)} se√±ales TCN")
            for symbol, signal_data in signals.items():
                print(f"üéØ {symbol}:")
                print(f"   üìà Se√±al: {signal_data['signal']}")
                print(f"   üéØ Confianza: {signal_data['confidence']:.1%}")
                print(f"   üí∞ Precio: ${signal_data['current_price']:,.2f}")
                print(f"   üîß Raz√≥n: {signal_data['reason']}")
                print(f"   üìä Features usadas: {signal_data.get('features_used', 'N/A')}")
                print(f"   ‚ö° Boost t√©cnico: {signal_data.get('technical_boost', 1.0):.2f}x")
                print()
        else:
            print("üìä No se generaron se√±ales en este test")
            print("   Esto puede ser normal si:")
            print("   - No hay se√±ales BUY con confianza >70%")
            print("   - El modelo predice HOLD o SELL")
            print("   - No hay datos suficientes")

        # Verificar que NO hay c√≥digo aleatorio
        print("üîç VERIFICANDO AUSENCIA DE C√ìDIGO ALEATORIO...")
        print("-" * 40)

        import inspect
        source_code = inspect.getsource(manager._generate_tcn_signals)

        if "random" in source_code.lower():
            print("‚ùå FALLO: A√∫n hay c√≥digo aleatorio en _generate_tcn_signals")
            return False
        else:
            print("‚úÖ √âXITO: No se detect√≥ c√≥digo aleatorio")

        # Verificar que usa modelo TCN
        if "tcn_predictor" in source_code.lower():
            print("‚úÖ √âXITO: Usa predictor TCN")
        else:
            print("‚ùå FALLO: No se detect√≥ uso del predictor TCN")
            return False

        # Verificar filtros de confianza
        if "confidence < 0.70" in source_code:
            print("‚úÖ √âXITO: Filtro de confianza 70% implementado")
        else:
            print("‚ö†Ô∏è ADVERTENCIA: No se detect√≥ filtro de confianza 70%")

        # Verificar filtro de se√±ales BUY only
        if "signal != 'BUY'" in source_code:
            print("‚úÖ √âXITO: Filtro BUY-only para Spot implementado")
        else:
            print("‚ùå FALLO: No se detect√≥ filtro BUY-only")
            return False

        print()
        print("üéâ TEST DE INTEGRACI√ìN TCN COMPLETADO")
        print("="*60)

        return True

    except Exception as e:
        print(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """üöÄ Funci√≥n principal"""
    success = await test_tcn_integration()

    if success:
        print("‚úÖ TODOS LOS TESTS PASARON")
        print("üéØ El sistema ahora usa el modelo TCN real")
        print("üö´ Se elimin√≥ la generaci√≥n aleatoria de se√±ales")
    else:
        print("‚ùå ALGUNOS TESTS FALLARON")
        print("‚ö†Ô∏è Revisar la implementaci√≥n")

    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
